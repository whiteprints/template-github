{%- raw %}
name: tests
on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags-ignore: ["**"]
  pull_request:

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-package:
    name: build and inspect package
    runs-on: ubuntu-latest
    environment:
      name: tests
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: build and inspect package
        id: baipp
        uses: hynek/build-and-inspect-python-package@f01e4d047aadcc0c054c95ec9900da3ec3fc7a0f # v2
      - name: find latest python
        id: baipp-latest
        run: |
          echo "supported_python_latest=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq -r -s '.[-1]')" >> "$github_output"
    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}
      python-latest: ${{ steps.baipp-latest.outputs.supported_python_latest }}
  check-types:
    name: run type checker under python ${{ matrix.python }} on ${{ matrix.os }}
    needs:
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ fromjson(needs.build-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: install project
        run: |
          uv sync --no-dev --group=check-types --python ${{ matrix.python }}
      - name: run pyright
        uses: jakebailey/pyright-action@b5d50e5cde6547546a5c4ac92e416a8c2c1a1dfe # v2
        with:
          python-version: "${{ matrix.python }}"
  check:
    name: tox env ${{ matrix.tox_env }}
    runs-on: ubuntu-latest
    environment:
      name: tests
    strategy:
      matrix:
        tox_env:
          - pre-commit
          - lint
          - check-vulnerabilities
          - check-exceptions
          - check-code-maintainability
          - check-documentation-links
          - build-documentation
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: run the test suite
        run: |
          uvx --quiet --no-progress --with tox-uv tox run -e ${{ matrix.tox_env }}
      - name: upload documentation
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        if: "${{ matrix.tox_env == 'build-documentation' }}"
        with:
          name: documentation
          path: docs_build/
          overwrite: true
  test:
    name: run tests under python ${{ matrix.python }} on ${{ matrix.os }}
    needs:
      - check
      - check-types
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ fromjson(needs.build-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: packages
          path: dist
      - name: pick environment to run
        run: |
          import os;
          env = "toxenv=py{}{}\n".format(*"${{ matrix.python }}".split("."))
          with open(os.environ["github_env"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(env)
        shell: python
      - name: run the test suite
        shell: bash
        run: |
          echo "report_file=.tox/test_report.md" >> "$github_env"
          uvx --quiet --no-progress --with tox-uv tox run --installpkg dist/*.whl
      - name: output reports to the job summary when tests fail
        if: failure()
        shell: bash
        run: |
          if [ -f "$report_file" ]; then
            echo "<details><summary>failed test report</summary>" >> $github_step_summary
            echo "" >> $github_step_summary
            cat "$report_file" >> $github_step_summary
            echo "" >> $github_step_summary
            echo "</details>" >> $github_step_summary
          fi
      - name: upload coverage data
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: .tox/.coverage.*
          overwrite: true
          include-hidden-files: true
      - name: upload test results
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python }}
          path: .tox/junit.*
          overwrite: true
          include-hidden-files: true
  container-deploy:
    name: build container
    needs:
      - build-package
    runs-on: ubuntu-latest
    environment:
      name: tests
    env:
      registry: ghcr.io
      python: "${{ needs.build-package.outputs.python-versions }}"
    strategy:
      matrix:
        image:
          - name: alpine
          - name: debian
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: packages
          path: dist
      - name: set up qemu
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3
      - name: set up docker buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3
      - name: set up docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        with:
          images: ${{ env.registry }}/${{ github.repository }}
          tags: |
            type=pep440,pattern={{version}},event=tag
            type=ref,event=branch,prefix=latest-
            type=sha
      - name: log in to the container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.github_token }}
      - name: set build_date
        run: echo "build_date=$(date -u +"%y-%m-%dt%h:%m:%sz")" >> $github_env
      - name: build
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        with:
          context: .
          file: ./container/containerfile.${{ matrix.image.name }}
          tags: |
            ${{ steps.meta.outputs.tags }}-${{ matrix.image.name }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            version=${{ steps.meta.outputs.version }}
            revision=${{ github.sha }}
            build_date=${{ env.build_date }}
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache
  coverage:
    name: coverage
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: coverage
    needs:
      - test
      - container-deploy
    steps:
      - name: check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: download coverage data
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
          path: .tox/
      - name: run coverage
        run: |
          uvx --quiet --no-progress --with tox-uv tox run -e coverage-combine
          uvx --quiet --no-progress --with tox-uv tox run -e coverage-report
          uvx --quiet --no-progress --with tox-uv tox run -e coverage
          uvx --quiet --no-progress --with tox-uv tox run --quiet --quiet -e coverage -- --format=markdown >> $github_step_summary
      - name: upload coverage report to codecov
        if: always()
        uses: codecov/codecov-action@7f8b4b4bde536c465e797be725718b88c5d95e0e # v5
        with:
          name: codecov-umbrella
          verbose: true
          flags: pytest
          file: .tox/.coverage.xml
          use_oidc: true
{%- endraw %}

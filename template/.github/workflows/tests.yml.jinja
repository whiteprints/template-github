{%- import pathjoin('includes', 'latest_python.jinja') as var -%}
{%- raw %}
name: Tests
on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags-ignore: ["**"]
  pull_request:
  schedule:
    - cron: "0 8 * * *"

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: tox env ${{ matrix.tox_env }}
    runs-on: ubuntu-latest
    environment:
      name: tests
    strategy:
      matrix:
        tox_env:
          - pre-commit
          - lint
          - check-types
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - name: Run the test suite
        run: |
          uvx --quiet --no-progress --with tox-uv tox run -e ${{ matrix.tox_env }}
  test:
    name: Run tests under Python ${{ matrix.python }} on ${{ matrix.os }}
    needs: check
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python:
{%- endraw %}
{%- for i in range(target_python_version[3:] | int, var.latest_python) %}
          - "3.{{ i }}"
{%- endfor %}
          - "3.12"
{%- raw %}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@windows-default-storage-path
        with:
          version: "latest"
          enable-cache: true
      - name: Pick environment to run
        run: |
          import os;
          env = "TOXENV=py{}{}-test\n".format(*"${{ matrix.python }}".split("."))
          with open(os.environ["GITHUB_ENV"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(env)
        shell: python
      - name: Run the test suite
        shell: bash
        run: |
          echo "REPORT_FILE=.tox/test_report.md" >> "$GITHUB_ENV"
          uvx --quiet --no-progress --with tox-uv tox run
      - name: Output reports to the job summary when tests fail
        if: failure()
        shell: bash
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "<details><summary>Failed Test Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload coverage data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: .tox/.coverage.*
          overwrite: true
          include-hidden-files: true
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python }}
          path: .tox/junit.*
          overwrite: true
          include-hidden-files: true
  container-deploy:
    name: Build Container
    runs-on: ubuntu-latest
    environment:
      name: tests
    env:
      REGISTRY: ghcr.io
    strategy:
      matrix:
        image:
          - name: alpine
            python: 3.12
            base: alpine3.20
            digest: "sha256:aeff64320ffb81056a2afae9d627875c5ba7d303fb40d6c0a43ee49d8f82641c"
          - name: debian
            python: 3.12
            base: slim-bookworm
            digest: "sha256:c24c34b502635f1f7c4e99dc09a2cbd85d480b7dcfd077198c6b5af138906390"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
{%- endraw %}
          images: ${{ '{{' }} env.REGISTRY {{ '}}' }}/${{ '{{' }} github.repository {{ '}}' }}
{%- raw %}
          tags: |
            type=pep440,pattern={{version}},event=tag
            type=ref,event=branch,prefix=latest-
            type=sha
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./container/Containerfile.${{ matrix.image.name }}
          tags: |
            ${{ steps.meta.outputs.tags }}-${{ matrix.image.base }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            PYTHON_VERSION=${{ matrix.image.python }}
            BASE_OS=${{ matrix.image.base }}
            DIGEST=${{ matrix.image.digest }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    environment:
      name: coverage
    needs:
      - test
      - container-deploy
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
          path: .tox/
      - name: Run coverage
        run: |
          uvx --quiet --no-progress --with tox-uv tox run -e coverage-combine
          uvx --quiet --no-progress --with tox-uv tox run -e coverage-report
          uvx --quiet --no-progress coverage@latest report --data-file .tox/.coverage --format=markdown >> $GITHUB_STEP_SUMMARY
{%- endraw %}

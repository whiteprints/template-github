{%- import pathjoin('includes', 'latest_python.jinja') as var -%}
{%- raw %}
name: Upload Release Artifacts

on:
  push:
    # branches to consider in the event; optional, defaults to all
    tags:
      - "v*.*.*"

jobs:
  dist_generation:
    name: Upload wheel and sdist
    runs-on: ubuntu-latest
    environment:
      name: artifacts
    permissions:
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Build sdist and wheel
        run: |
          uvx --quiet --no-progress tox run -e distribute
      - name: Upload dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.vars.outputs.tag }} dist/*.whl --clobber
          gh release upload ${{ steps.vars.outputs.tag }} dist/*.tar.gz --clobber
  sbom_generation:
    name: Generate SBOM under Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: artifacts
    permissions:
      contents: write
    strategy:
      matrix:
        python:
{%- endraw %}
{%- for i in range(target_python_version[3:] | int, var.latest_python) %}
          - "3.{{ i }}"
{%- endfor %}
{%- raw %}
          - "3.12"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - name: Pick environment to run
        run: |
          import os
          python_version = "${{ matrix.python }}".split(".")
          tox_env = f"TOXENV=py{python_version[0]}{python_version[1]}-BOM\n"
          py_version = f"PYVERSION=py{python_version[0]}{python_version[1]}\n"
          env_variables = tox_env + py_version
          with open(os.environ["GITHUB_ENV"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(env_variables)
        shell: python
      - name: SBOM generation
        run: |
          uvx --quiet --no-progress tox run
      - name: Create BOM Archive
        shell: python
        run: |
          import zipfile, os
          from pathlib import Path

          with zipfile.ZipFile(f'BOM-${{ runner.os }}-{os.getenv("PYVERSION")}.zip', 'w') as zipf:
              for f in Path(f'BOM/{os.getenv("PYVERSION")}').rglob('*'):
                  zipf.write(f, f.relative_to(f'BOM/{os.getenv("PYVERSION")}'))
      - name: Upload SBOM as Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.vars.outputs.tag }} BOM-${{ runner.os }}-${{ env.PYVERSION }}.zip --clobber
{%- endraw %}

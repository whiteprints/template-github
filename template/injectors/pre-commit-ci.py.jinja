# /// script
# requires-python = ">=3.9"
# dependencies = [
#     "pyyaml>=6.0.2",
# ]
# ///
"""Script to update `.pre-commit-config.yaml` with CI configuration.

This script reads the `.pre-commit-config.yaml` file, appends or updates
the CI configuration, and writes the changes back to the file.
"""
from pathlib import Path
import yaml


def update_pre_commit_config() -> None:
    """Appends or updates the CI configuration in `.pre-commit-config.yaml`.

    This function reads the `.pre-commit-config.yaml` file, adds the provided
    CI configuration to the existing content, and saves it back to the file,
    preserving the comments and original formatting as much as possible.
    """
    config_path = Path(".pre-commit-config.yaml")

    if not config_path.exists():
        raise FileNotFoundError(f"{config_path} does not exist.")

    # Read the existing configuration as text
    original_content = config_path.read_text(encoding="utf-8")

    # Load the configuration using PyYAML
    config = yaml.safe_load(original_content) or {}

    # Define the new CI configuration
    ci_config = {
        "autofix_commit_msg": (
            "refactoring: auto fixes from pre-commit.com hooks"
        ),
        "autofix_prs": True,
        "autoupdate_branch": "",
        "autoupdate_commit_msg": "ci(dependencies): autoupdate pre-commit hooks",
        "skip": [],
        "submodules": False,
    }

    # Update the CI section without altering the rest of the content
    if "ci" not in config:
        config["ci"] = ci_config
    else:
        config["ci"].update(ci_config)

    # Convert the updated config back to YAML
    updated_content = yaml.safe_dump(config, sort_keys=False)

    # Merge changes back carefully (this is a naive merge; adjust as needed)
    merged_content = original_content
    if "ci:" in original_content:
        merged_content = original_content.replace(original_content.split("ci:")[1], updated_content.split("ci:")[1])
    else:
        merged_content += "\n" + updated_content

    # Write the merged content back to the file
    config_path.write_text(merged_content, encoding="utf-8")


if __name__ == "__main__":
    update_pre_commit_config()

